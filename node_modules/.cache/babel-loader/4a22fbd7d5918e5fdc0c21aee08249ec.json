{"ast":null,"code":"var _jsxFileName = \"/Users/hnee/YaManNa/src/SearchBar.js\";\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Button } from '@material-ui/core'; // TODO 해인아 요기 수정하면대\n\nclass SearchBar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      addr: '',\n      searchDialog: false\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        addr: e.target.value\n      });\n    };\n\n    this.handleBtnClick = () => {\n      //this.setState({ searchDialog: true });\n      //alert(this.state.addr);\n      //검색 input\n      let input = this.state.addr; //주소-좌표 변환 객체를 생성\n\n      let geocoder = new window.daum.maps.services.Geocoder(); //키워드 검색 객체를 생성\n\n      let ps = new window.daum.maps.services.Places(); //주소로 검색한 경우\n\n      geocoder.addressSearch(this.state.addr, function (result, status, pagination) {\n        if (input != null && status === window.daum.maps.services.Status.OK) {\n          //let coords = new window.daum.maps.LatLng(result[0].y, result[0].x);\n          //alert(\"Lat: \"+result[0].y+\", \\n\"+\n          //        \"Lng: \"+result[0].x);\n          //검색 목록 출력\n          displayPlaces(data); //페이지 번호 출력\n\n          displayPagination(pagination);\n        } else if (input != null) {\n          //키워드(장소명)로 검색한 경우\n          ps.keywordSearch(input, function (result, status, pagination) {\n            if (status === window.daum.maps.services.Status.OK) {\n              //let coords = new window.daum.maps.LatLng(result[0].y, result[0].x);\n              //alert(\"Lat: \"+result[0].y+\", \\n\"+\n              //        \"Lng: \"+result[0].x);\n              //검색 목록 출력\n              displayPlaces(data); //페이지 번호 출력\n\n              displayPagination(pagination);\n            } else if (status === window.daum.maps.services.Status.ZERO_RESULT) {\n              alert('검색 결과가 존재하지 않습니다.');\n              return;\n            } else if (status === window.daum.maps.services.Status.ERROR) {\n              alert('검색 결과 중 오류가 발생했습니다.');\n              return;\n            }\n          });\n        } else if (status === window.daum.maps.services.Status.ZERO_RESULT) {\n          alert('검색 결과가 존재하지 않습니다.');\n          return;\n        } else if (status === window.daum.maps.services.Status.ERROR) {\n          alert('검색 결과 중 오류가 발생했습니다.');\n          return;\n        }\n      });\n\n      function displayPlaces(places) {} //검색 결과 목록 하단에 페이지 번호를 표시하는 함수\n\n\n      function displayPagination(pagination) {\n        let paginationEl = document.getElementById('pagination');\n        fragment = document.createDocumentFragment(), i; //기존에 추가된 페이지 번호 삭제\n\n        while (paginationEl.hasChildNodes()) {\n          paginationEl.removeChild(paginationEl.lastChild);\n        }\n\n        for (i = 1; i <= pagination.last; i++) {\n          let el = document.createElement('a');\n          el.href = \"#\";\n          el.innerHTML = i;\n\n          if (i === pagination.current) {\n            el.className = 'on';\n          } else {\n            el.onClick = function (i) {\n              return function () {\n                pagination.gotoPage(i);\n              };\n            }(i);\n          }\n\n          fragment.appendChild(el);\n        }\n\n        paginationEl.appendChild(fragment);\n      } //검색 결과 목록의 자식 Element를 제거하는 함수\n\n\n      function removeAllChildNodes(el) {\n        while (el.hasChildNodes()) {\n          el.removeChild(el.lastChild);\n        }\n      }\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        searchDialog: false\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      style: \"padding: 5px\",\n      id: \"standard-search\",\n      label: \"\\uC7A5\\uC18C\\uB97C \\uAC80\\uC0C9\\uD558\\uC138\\uC694!\",\n      type: \"search\",\n      margin: \"normal\",\n      value: this.state.addr,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(Button, {\n      style: {\n        backgroundColor: \"yellow\"\n      },\n      id: \"searchBtn\",\n      onClick: this.handleBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"\\uAC80\\uC0C9\"), React.createElement(Dialog, {\n      style: \"padding: 5px\",\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"customized-dialog-title\",\n      open: this.state.searchDialog,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      id: \"placesList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"pagination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default SearchBar;","map":{"version":3,"sources":["/Users/hnee/YaManNa/src/SearchBar.js"],"names":["React","TextField","Dialog","Button","SearchBar","Component","state","addr","searchDialog","handleChange","e","setState","target","value","handleBtnClick","input","geocoder","window","daum","maps","services","Geocoder","ps","Places","addressSearch","result","status","pagination","Status","OK","displayPlaces","data","displayPagination","keywordSearch","ZERO_RESULT","alert","ERROR","places","paginationEl","document","getElementById","fragment","createDocumentFragment","i","hasChildNodes","removeChild","lastChild","last","el","createElement","href","innerHTML","current","className","onClick","gotoPage","appendChild","removeAllChildNodes","handleClose","render","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Button } from '@material-ui/core';\n\n// TODO 해인아 요기 수정하면대\nclass SearchBar extends React.Component {\n\n    state = {\n        addr: '',\n        searchDialog: false\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            addr: e.target.value\n        });\n    }\n\n    handleBtnClick = () => {\n        //this.setState({ searchDialog: true });\n        //alert(this.state.addr);\n\n        //검색 input\n        let input = this.state.addr;\n\n        //주소-좌표 변환 객체를 생성\n        let geocoder = new window.daum.maps.services.Geocoder();\n\n        //키워드 검색 객체를 생성\n        let ps = new window.daum.maps.services.Places();\n\n        //주소로 검색한 경우\n        geocoder.addressSearch(this.state.addr, function(result, status, pagination){\n            if(input!= null && status === window.daum.maps.services.Status.OK){\n                //let coords = new window.daum.maps.LatLng(result[0].y, result[0].x);\n                //alert(\"Lat: \"+result[0].y+\", \\n\"+\n                //        \"Lng: \"+result[0].x);\n\n                //검색 목록 출력\n                displayPlaces(data);\n                //페이지 번호 출력\n                displayPagination(pagination);\n            }else if(input!=null){ //키워드(장소명)로 검색한 경우\n                ps.keywordSearch(input, function(result, status, pagination){\n                    if(status === window.daum.maps.services.Status.OK){\n                        //let coords = new window.daum.maps.LatLng(result[0].y, result[0].x);\n                        //alert(\"Lat: \"+result[0].y+\", \\n\"+\n                        //        \"Lng: \"+result[0].x);\n                        \n                        //검색 목록 출력\n                        displayPlaces(data);\n                        //페이지 번호 출력\n                        displayPagination(pagination);\n                    }else if (status === window.daum.maps.services.Status.ZERO_RESULT) {\n                        alert('검색 결과가 존재하지 않습니다.');\n                        return;       \n                    } else if (status === window.daum.maps.services.Status.ERROR) {        \n                        alert('검색 결과 중 오류가 발생했습니다.');\n                        return;\n                    }\n                })\n            }else if (status === window.daum.maps.services.Status.ZERO_RESULT) {\n                alert('검색 결과가 존재하지 않습니다.');\n                return;       \n            } else if (status === window.daum.maps.services.Status.ERROR) {        \n                alert('검색 결과 중 오류가 발생했습니다.');\n                return;\n            }\n        });\n        \n        function displayPlaces(places) {\n\n        }\n\n        //검색 결과 목록 하단에 페이지 번호를 표시하는 함수\n        function displayPagination(pagination) {\n            let paginationEl = document.getElementById('pagination');\n            fragment = document.createDocumentFragment(),\n            i;\n\n            //기존에 추가된 페이지 번호 삭제\n            while(paginationEl.hasChildNodes()) {\n                paginationEl.removeChild(paginationEl.lastChild);\n            }\n\n            for(i=1;i<=pagination.last;i++){\n                let el = document.createElement('a');\n                el.href = \"#\";\n                el.innerHTML = i;\n\n                if(i===pagination.current){\n                    el.className = 'on';\n                }else{\n                    el.onClick = (function(i){\n                        return function() {\n                            pagination.gotoPage(i);\n                        }\n                    })(i);\n                }\n                fragment.appendChild(el);\n            }\n            paginationEl.appendChild(fragment);\n        }\n\n        //검색 결과 목록의 자식 Element를 제거하는 함수\n        function removeAllChildNodes(el) {\n            while(el.hasChildNodes()){\n                el.removeChild(el.lastChild);\n            }\n        }\n    }\n\n    handleClose = () => {\n        this.setState({ searchDialog: false });\n    };\n\n\n\n    render() {\n        return (\n            <div>\n                <TextField\n                    style=\"padding: 5px\"\n                    id=\"standard-search\"\n                    label=\"장소를 검색하세요!\"\n                    type=\"search\"\n                    margin=\"normal\"\n                    value={this.state.addr}\n                    onChange={this.handleChange}\n                />\n\n                <Button\n                    style={{backgroundColor: \"yellow\"}}\n                    id=\"searchBtn\"\n                    onClick={this.handleBtnClick}\n                >검색</Button>\n\n                <Dialog\n                    style=\"padding: 5px\"\n                    onClose={this.handleClose}\n                    aria-labelledby=\"customized-dialog-title\"\n                    open={this.state.searchDialog}\n                >\n                    <ul id=\"placesList\"></ul>\n                    <div id=\"pagination\"></div>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}