{"ast":null,"code":"var _jsxFileName = \"/Users/hnee/YaManNa/src/MapPage.js\";\nimport React from 'react';\nimport { fire, getFireDB } from './shared/firebase.template.js';\nimport './Map.css';\nimport SearchBar from './SearchBar';\n\nclass MapPage extends React.Component {\n  constructor() {\n    super();\n    fire();\n  }\n\n  componentDidMount() {\n    // 지도에 마커와 인포윈도우를 표시하는 함수입니다\n    const displayMarker = (locPosition, message) => {\n      // 마커를 생성합니다\n      let marker = new window.daum.maps.Marker({\n        map: map,\n        position: locPosition\n      });\n      let iwContent = message,\n          // 인포윈도우에 표시할 내용\n      iwRemoveable = true; // 인포윈도우를 생성합니다\n\n      let infowindow = new window.daum.maps.InfoWindow({\n        content: iwContent,\n        removable: iwRemoveable\n      }); // 인포윈도우를 마커위에 표시합니다\n\n      infowindow.open(map, marker); // 지도 중심좌표를 접속위치로 변경합니다\n\n      map.setCenter(locPosition);\n    };\n\n    let el = document.getElementById('map');\n    let map = new window.daum.maps.Map(el, {\n      center: new window.daum.maps.LatLng(33.450701, 126.570667),\n      //지도의 중심좌표.\n      level: 4 //지도의 레벨(확대, 축소 정도)\n\n    });\n    let bounds = new window.daum.maps.LatLngBounds();\n    const params = this.props.match.params;\n    const history = this.props.history;\n\n    if (navigator.geolocation) {\n      // GeoLocation을 이용해서 접속 위치를 얻어옵니다\n      navigator.geolocation.getCurrentPosition(function (position) {\n        let lat = position.coords.latitude,\n            // 위도\n        lon = position.coords.longitude; // 경도\n\n        console.log(window.localStorage);\n\n        if (params.id === undefined || window.localStorage.getItem(params.id) !== \"true\") {\n          if (params.id === undefined) {\n            getFireDB().ref().push({\n              master: {\n                lat: lat,\n                lon: lon\n              }\n            }).then(result => {\n              console.log(history);\n              const key = result.key;\n              window.localStorage.setItem(key, \"true\");\n              history.push('/spot/' + key);\n            }).catch(e => {\n              console.log(e);\n            });\n          } else {\n            getFireDB().ref().child(params.id).push({\n              lat: lat,\n              lon: lon\n            });\n            window.localStorage.setItem(params.id, \"true\");\n          }\n        }\n\n        if (params.id !== undefined) {\n          // 마커 이미지의 이미지 주소입니다\n          let imageSrc = \"//t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png\";\n          let marker;\n          let garo = 0;\n          let sero = 0;\n          let count = 0;\n          let starCountRef = getFireDB().ref(params.id); // starCountRef.on('value', function(snapshot) {\n          //\n          //     snapshot.forEach(function(childSnapshot) {\n          //         let childKey = childSnapshot.key;\n          //         let childData = childSnapshot.val();\n          //         console.log(childKey)\n          //         console.log(childData)\n          //\n          //         garo += (childData.lat * 1)\n          //         sero += (childData.lon * 1)\n          //         count++\n          //\n          //         // 마커 이미지의 이미지 크기 입니다\n          //         let imageSize = new window.daum.maps.Size(24, 35);\n          //\n          //         // 마커 이미지를 생성합니다\n          //         let markerImage = new window.daum.maps.MarkerImage(imageSrc, imageSize);\n          //\n          //         // 마커를 생성합니다\n          //         let mk = new window.daum.maps.Marker({\n          //             map: map, // 마커를 표시할 지도\n          //             position: new window.daum.maps.LatLng(childData.lat, childData.lon), // 마커를 표시할 위치\n          //             title : childKey, // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\n          //         });\n          //\n          //         bounds.extend(mk)\n          //\n          //     });\n          //\n          //     // 마커 이미지의 이미지 크기 입니다\n          //     let imageSize2 = new window.daum.maps.Size(40, 50);\n          //\n          //     // 마커 이미지를 생성합니다\n          //     let markerImage2 = new window.daum.maps.MarkerImage(imageSrc, imageSize2);\n          //\n          //     let center = new window.daum.maps.LatLng(garo/count, sero/count)\n          //     // 마커를 생성합니다\n          //     marker = new window.daum.maps.Marker({\n          //         map: map, // 마커를 표시할 지도\n          //         position: center, // 마커를 표시할 위치\n          //         title : '여기가 중간', // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\n          //         image : markerImage2 // 마커 이미지\n          //     });\n          //     map.setCenter(center);\n          // });\n\n          let infowindow;\n          starCountRef.on('child_added', function (data) {\n            if (marker != null) marker.setMap(null);\n            if (infowindow != null) infowindow.close();\n            garo += data.val().lat * 1;\n            sero += data.val().lon * 1;\n            count++; // 마커 이미지의 이미지 크기 입니다\n\n            let imageSize = new window.daum.maps.Size(24, 35); // 마커 이미지를 생성합니다\n\n            new window.daum.maps.MarkerImage(imageSrc, imageSize); // 마커를 생성합니다\n\n            new window.daum.maps.Marker({\n              map: map,\n              // 마커를 표시할 지도\n              position: new window.daum.maps.LatLng(data.val().lat, data.val().lon),\n              // 마커를 표시할 위치\n              title: data.key // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\n\n            });\n            bounds.extend(new window.daum.maps.LatLng(data.val().lat, data.val().lon)); // 센터 부분\n            // 마커 이미지의 이미지 크기 입니다\n\n            let imageSize2 = new window.daum.maps.Size(40, 50); // 마커 이미지를 생성합니다\n\n            let markerImage2 = new window.daum.maps.MarkerImage(imageSrc, imageSize2);\n            let center = new window.daum.maps.LatLng(garo / count, sero / count); // 마커를 생성합니다\n\n            marker = new window.daum.maps.Marker({\n              map: map,\n              // 마커를 표시할 지도\n              position: center,\n              // 마커를 표시할 위치\n              title: '여기가 중간',\n              // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\n              image: markerImage2 // 마커 이미지\n\n            });\n            map.setCenter(center);\n            let iwContent = \"당신들의 중간은 여기입니다\",\n                // 인포윈도우에 표시할 내용\n            iwRemoveable = true; // 인포윈도우를 생성합니다\n\n            infowindow = new window.daum.maps.InfoWindow({\n              content: iwContent,\n              removable: iwRemoveable\n            }); // 인포윈도우를 마커위에 표시합니다\n\n            infowindow.open(map, marker);\n            map.setBounds(bounds);\n          });\n        } // let locPosition = new window.daum.maps.LatLng(lat, lon), // 마커가 표시될 위치를 geolocation으로 얻어온 좌표로 생성합니다\n        //     message = '<div style=\"padding:5px;\">여기에 계신가요?!</div>'; // 인포윈도우에 표시될 내용입니다\n        //\n        // // 마커와 인포윈도우를 표시합니다\n        // displayMarker(locPosition, message);\n\n      }, function error(err) {\n        console.warn('ERROR(' + err.code + '): ' + err.message);\n      });\n    } else {\n      // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\n      let locPosition = new window.daum.maps.LatLng(33.450701, 126.570667),\n          message = 'geolocation을 사용할수 없어요..';\n      displayMarker(locPosition, message);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(SearchBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"map\",\n      className: \"mapClass\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MapPage;","map":{"version":3,"sources":["/Users/hnee/YaManNa/src/MapPage.js"],"names":["React","fire","getFireDB","SearchBar","MapPage","Component","constructor","componentDidMount","displayMarker","locPosition","message","marker","window","daum","maps","Marker","map","position","iwContent","iwRemoveable","infowindow","InfoWindow","content","removable","open","setCenter","el","document","getElementById","Map","center","LatLng","level","bounds","LatLngBounds","params","props","match","history","navigator","geolocation","getCurrentPosition","lat","coords","latitude","lon","longitude","console","log","localStorage","id","undefined","getItem","ref","push","master","then","result","key","setItem","catch","e","child","imageSrc","garo","sero","count","starCountRef","on","data","setMap","close","val","imageSize","Size","MarkerImage","title","extend","imageSize2","markerImage2","image","setBounds","error","err","warn","code","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { fire,getFireDB } from './shared/firebase.template.js'\nimport './Map.css'\nimport SearchBar from './SearchBar'\n\nclass MapPage extends React.Component {\n\n    constructor() {\n        super();\n        fire();\n    }\n\n    componentDidMount() {\n\n        // 지도에 마커와 인포윈도우를 표시하는 함수입니다\n        const displayMarker = (locPosition, message) => {\n\n            // 마커를 생성합니다\n            let marker = new window.daum.maps.Marker({\n                map: map,\n                position: locPosition\n            });\n\n            let iwContent = message, // 인포윈도우에 표시할 내용\n                iwRemoveable = true;\n\n            // 인포윈도우를 생성합니다\n            let infowindow = new window.daum.maps.InfoWindow({\n                content : iwContent,\n                removable : iwRemoveable\n            });\n\n            // 인포윈도우를 마커위에 표시합니다\n            infowindow.open(map, marker);\n\n            // 지도 중심좌표를 접속위치로 변경합니다\n            map.setCenter(locPosition);\n        }\n\n        let el = document.getElementById('map');\n        let map = new window.daum.maps.Map(el, {\n            center: new window.daum.maps.LatLng(33.450701, 126.570667), //지도의 중심좌표.\n            level: 4 //지도의 레벨(확대, 축소 정도)\n        });\n\n\n        let bounds = new window.daum.maps.LatLngBounds();\n\n        const { match: { params } } = this.props;\n        const history = this.props.history;\n\n        if (navigator.geolocation) {\n            // GeoLocation을 이용해서 접속 위치를 얻어옵니다\n            navigator.geolocation.getCurrentPosition(\n                function(position) {\n                    let lat = position.coords.latitude, // 위도\n                        lon = position.coords.longitude; // 경도\n                    console.log(window.localStorage)\n                    if(params.id === undefined || window.localStorage.getItem(params.id) !== \"true\") {\n                        if(params.id === undefined) {\n                            getFireDB().ref().push({master:{lat:lat, lon:lon}})\n                                .then(result => {\n                                    console.log(history)\n                                    const key = result.key\n                                    window.localStorage.setItem(key,\"true\")\n                                    history.push('/spot/'+key);\n                                })\n                                .catch(e => {\n                                    console.log(e)\n                                })\n                        }else {\n                            getFireDB().ref().child(params.id).push({lat:lat, lon:lon})\n                            window.localStorage.setItem(params.id,\"true\")\n                        }\n                    }\n\n\n\n                    if(params.id !== undefined) {\n\n                        // 마커 이미지의 이미지 주소입니다\n                        let imageSrc = \"//t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png\";\n\n                        let marker\n                        let garo = 0\n                        let sero = 0\n                        let count = 0\n\n                        let starCountRef = getFireDB().ref(params.id);\n                        // starCountRef.on('value', function(snapshot) {\n                        //\n                        //     snapshot.forEach(function(childSnapshot) {\n                        //         let childKey = childSnapshot.key;\n                        //         let childData = childSnapshot.val();\n                        //         console.log(childKey)\n                        //         console.log(childData)\n                        //\n                        //         garo += (childData.lat * 1)\n                        //         sero += (childData.lon * 1)\n                        //         count++\n                        //\n                        //         // 마커 이미지의 이미지 크기 입니다\n                        //         let imageSize = new window.daum.maps.Size(24, 35);\n                        //\n                        //         // 마커 이미지를 생성합니다\n                        //         let markerImage = new window.daum.maps.MarkerImage(imageSrc, imageSize);\n                        //\n                        //         // 마커를 생성합니다\n                        //         let mk = new window.daum.maps.Marker({\n                        //             map: map, // 마커를 표시할 지도\n                        //             position: new window.daum.maps.LatLng(childData.lat, childData.lon), // 마커를 표시할 위치\n                        //             title : childKey, // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\n                        //         });\n                        //\n                        //         bounds.extend(mk)\n                        //\n                        //     });\n                        //\n                        //     // 마커 이미지의 이미지 크기 입니다\n                        //     let imageSize2 = new window.daum.maps.Size(40, 50);\n                        //\n                        //     // 마커 이미지를 생성합니다\n                        //     let markerImage2 = new window.daum.maps.MarkerImage(imageSrc, imageSize2);\n                        //\n                        //     let center = new window.daum.maps.LatLng(garo/count, sero/count)\n                        //     // 마커를 생성합니다\n                        //     marker = new window.daum.maps.Marker({\n                        //         map: map, // 마커를 표시할 지도\n                        //         position: center, // 마커를 표시할 위치\n                        //         title : '여기가 중간', // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\n                        //         image : markerImage2 // 마커 이미지\n                        //     });\n                        //     map.setCenter(center);\n                        // });\n\n                        let infowindow\n\n                        starCountRef.on('child_added', function(data) {\n                            if(marker != null) marker.setMap(null)\n                            if(infowindow != null) infowindow.close()\n\n                            garo += (data.val().lat * 1)\n                            sero += (data.val().lon * 1)\n                            count++\n\n                            // 마커 이미지의 이미지 크기 입니다\n                            let imageSize = new window.daum.maps.Size(24, 35);\n\n                            // 마커 이미지를 생성합니다\n                            new window.daum.maps.MarkerImage(imageSrc, imageSize);\n\n                            // 마커를 생성합니다\n                            new window.daum.maps.Marker({\n                                map: map, // 마커를 표시할 지도\n                                position: new window.daum.maps.LatLng(data.val().lat, data.val().lon), // 마커를 표시할 위치\n                                title : data.key, // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\n                            });\n\n                            bounds.extend(new window.daum.maps.LatLng(data.val().lat, data.val().lon))\n\n                            // 센터 부분\n\n                            // 마커 이미지의 이미지 크기 입니다\n                            let imageSize2 = new window.daum.maps.Size(40, 50);\n\n                            // 마커 이미지를 생성합니다\n                            let markerImage2 = new window.daum.maps.MarkerImage(imageSrc, imageSize2);\n\n                            let center = new window.daum.maps.LatLng(garo/count, sero/count)\n                            // 마커를 생성합니다\n                            marker = new window.daum.maps.Marker({\n                                map: map, // 마커를 표시할 지도\n                                position: center, // 마커를 표시할 위치\n                                title : '여기가 중간', // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\n                                image : markerImage2 // 마커 이미지\n                            });\n                            map.setCenter(center);\n\n                            let iwContent = \"당신들의 중간은 여기입니다\", // 인포윈도우에 표시할 내용\n                                iwRemoveable = true;\n\n                            // 인포윈도우를 생성합니다\n                            infowindow = new window.daum.maps.InfoWindow({\n                                content : iwContent,\n                                removable : iwRemoveable\n                            });\n\n                            // 인포윈도우를 마커위에 표시합니다\n                            infowindow.open(map, marker);\n\n                            map.setBounds(bounds);\n\n                        });\n                    }\n\n                    // let locPosition = new window.daum.maps.LatLng(lat, lon), // 마커가 표시될 위치를 geolocation으로 얻어온 좌표로 생성합니다\n                    //     message = '<div style=\"padding:5px;\">여기에 계신가요?!</div>'; // 인포윈도우에 표시될 내용입니다\n                    //\n                    // // 마커와 인포윈도우를 표시합니다\n                    // displayMarker(locPosition, message);\n                },\n                function error(err) {\n                    console.warn('ERROR(' + err.code + '): ' + err.message);\n                }\n            );\n\n        } else { // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\n            let locPosition = new window.daum.maps.LatLng(33.450701, 126.570667),\n                message = 'geolocation을 사용할수 없어요..'\n            displayMarker(locPosition, message);\n        }\n\n    }\n\n    render() {\n        return (\n            <div className=\"App App-header\">\n                <SearchBar/>\n                <div id=\"map\" className=\"mapClass\"/>\n            </div>\n        );\n    }\n}\n\nexport default MapPage;\n"]},"metadata":{},"sourceType":"module"}