{"ast":null,"code":"var _jsxFileName = \"/Users/hnee/YaManNa/src/SearchBar.js\";\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Button } from '@material-ui/core'; // TODO 해인아 요기 수정하면대\n\nclass SearchBar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      addr: '',\n      searchDialog: false\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        addr: e.target.value\n      });\n    };\n\n    this.handleBtnClick = () => {\n      //this.setState({ searchDialog: true });\n      //alert(this.state.addr);\n      //검색 input\n      let input = this.state.addr; //주소-좌표 변환 객체를 생성\n\n      let geocoder = new window.daum.maps.services.Geocoder(); //키워드 검색 객체를 생성\n\n      let ps = new window.daum.maps.services.Places(); //result는 list로 나오므로, 최상위 값을 일단 출력\n      //주소로 검색한 경우\n\n      geocoder.addressSearch(this.state.addr, function (result, status, pagination) {\n        if (input != null && status === window.daum.maps.services.Status.OK) {\n          let coords = new window.daum.maps.LatLng(result[0].y, result[0].x);\n          alert(\"Lat: \" + result[0].y + \", \\n\" + \"Lng: \" + result[0].x); //검색 목록 출력\n          //displayPlaces(data);\n          //페이지 번호 출력\n          //displayPagination(pagination);\n        } else if (input != null) {\n          //키워드(장소명)로 검색한 경우\n          ps.keywordSearch(input, function (result, status, pagination) {\n            if (status === window.daum.maps.services.Status.OK) {\n              let coords = new window.daum.maps.LatLng(result[0].y, result[0].x);\n              alert(\"Lat: \" + result[0].y + \", \\n\" + \"Lng: \" + result[0].x); //검색 목록 출력\n              //displayPlaces(data);\n              //페이지 번호 출력\n              //displayPagination(pagination);\n            }\n          });\n        }\n      }); //주소로 좌표를 검색\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        searchDialog: false\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      id: \"standard-search\",\n      label: \"\\uC7A5\\uC18C\\uB97C \\uAC80\\uC0C9\\uD558\\uC138\\uC694!\",\n      type: \"search\",\n      margin: \"normal\",\n      value: this.state.addr,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(Button, {\n      style: {\n        backgroundColor: \"yellow\"\n      },\n      id: \"searchBtn\",\n      onClick: this.handleBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"\\uAC80\\uC0C9\"), React.createElement(Dialog, {\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"customized-dialog-title\",\n      open: this.state.searchDialog,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      id: \"placesList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"pagination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default SearchBar;","map":{"version":3,"sources":["/Users/hnee/YaManNa/src/SearchBar.js"],"names":["React","TextField","Dialog","Button","SearchBar","Component","state","addr","searchDialog","handleChange","e","setState","target","value","handleBtnClick","input","geocoder","window","daum","maps","services","Geocoder","ps","Places","addressSearch","result","status","pagination","Status","OK","coords","LatLng","y","x","alert","keywordSearch","handleClose","render","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Button } from '@material-ui/core';\n\n// TODO 해인아 요기 수정하면대\nclass SearchBar extends React.Component {\n\n    state = {\n        addr: '',\n        searchDialog: false\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            addr: e.target.value\n        });\n    }\n\n    handleBtnClick = () => {\n        //this.setState({ searchDialog: true });\n        //alert(this.state.addr);\n\n        //검색 input\n        let input = this.state.addr;\n\n        //주소-좌표 변환 객체를 생성\n        let geocoder = new window.daum.maps.services.Geocoder();\n\n        //키워드 검색 객체를 생성\n        let ps = new window.daum.maps.services.Places();\n\n        //result는 list로 나오므로, 최상위 값을 일단 출력\n        //주소로 검색한 경우\n        geocoder.addressSearch(this.state.addr, function(result, status, pagination){\n            if(input!= null && status === window.daum.maps.services.Status.OK){\n                let coords = new window.daum.maps.LatLng(result[0].y, result[0].x);\n                alert(\"Lat: \"+result[0].y+\", \\n\"+\n                        \"Lng: \"+result[0].x);\n\n                //검색 목록 출력\n                //displayPlaces(data);\n                //페이지 번호 출력\n                //displayPagination(pagination);\n            }else if(input!=null){ //키워드(장소명)로 검색한 경우\n                ps.keywordSearch(input, function(result, status, pagination){\n                    if(status === window.daum.maps.services.Status.OK){\n                        let coords = new window.daum.maps.LatLng(result[0].y, result[0].x);\n                        alert(\"Lat: \"+result[0].y+\", \\n\"+\n                                \"Lng: \"+result[0].x);\n                    \n                    //검색 목록 출력\n                    //displayPlaces(data);\n                    //페이지 번호 출력\n                    //displayPagination(pagination);\n                    }\n                })\n            }\n        })\n        //주소로 좌표를 검색\n        \n    }\n\n    handleClose = () => {\n        this.setState({ searchDialog: false });\n    };\n\n\n\n    render() {\n        return (\n            <div>\n                <TextField\n                    id=\"standard-search\"\n                    label=\"장소를 검색하세요!\"\n                    type=\"search\"\n                    margin=\"normal\"\n                    value={this.state.addr}\n                    onChange={this.handleChange}\n                />\n\n                <Button\n                    style={{backgroundColor: \"yellow\"}}\n                    id=\"searchBtn\"\n                    onClick={this.handleBtnClick}\n                >검색</Button>\n\n                <Dialog\n                    onClose={this.handleClose}\n                    aria-labelledby=\"customized-dialog-title\"\n                    open={this.state.searchDialog}\n                >\n                    <ul id=\"placesList\"></ul>\n                    <div id=\"pagination\"></div>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}