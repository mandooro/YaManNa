{"ast":null,"code":"var _jsxFileName = \"/Users/hnee/YaManNa/src/SearchBar.js\";\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Button } from '@material-ui/core'; // TODO 해인아 요기 수정하면대\n\nclass SearchBar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      addr: '',\n      searchDialog: false\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        addr: e.target.value\n      });\n    };\n\n    this.handleBtnClick = () => {\n      //this.setState({ searchDialog: true });\n      //this.forceUpdate();\n      //alert(this.state.addr);\n      //검색 input\n      let input = this.state.addr; //주소-좌표 변환 객체를 생성\n\n      let geocoder = new window.daum.maps.services.Geocoder(); //키워드 검색 객체를 생성\n\n      let ps = new window.daum.maps.services.Places(); //주소로 검색한 경우\n\n      geocoder.addressSearch(input, function (result, status, pagination) {\n        if (input != null && status === window.daum.maps.services.Status.OK) {\n          //let coords = new window.daum.maps.LatLng(result[0].y, result[0].x);\n          //alert(\"Lat: \"+result[0].y+\", \\n\"+\n          //        \"Lng: \"+result[0].x);\n          alert(result[0].place_name + \"\\n\" + result[0].road_address_name + \"\\n\" + result[0].address_name + \"\\n\" + result[0].phone); //검색 목록 출력\n          //displayPlaces(result);\n          //페이지 번호 출력\n          //displayPagination(pagination);\n        } else if (input != null) {\n          //키워드(장소명)로 검색한 경우\n          ps.keywordSearch(input, function (result, status, pagination) {\n            if (status === window.daum.maps.services.Status.OK) {//let coords = new window.daum.maps.LatLng(result[0].y, result[0].x);\n              //alert(\"Lat: \"+result[0].y+\", \\n\"+\n              //        \"Lng: \"+result[0].x);\n              //검색 목록 출력\n              //displayPlaces(result);\n              //페이지 번호 출력\n              //displayPagination(pagination);\n            } else if (status === window.daum.maps.services.Status.ZERO_RESULT) {\n              alert('검색 결과가 존재하지 않습니다.');\n              return;\n            } else if (status === window.daum.maps.services.Status.ERROR) {\n              alert('검색 결과 중 오류가 발생했습니다.');\n              return;\n            }\n          });\n        } else if (status === window.daum.maps.services.Status.ZERO_RESULT) {\n          alert('검색 결과가 존재하지 않습니다.');\n          return;\n        } else if (status === window.daum.maps.services.Status.ERROR) {\n          alert('검색 결과 중 오류가 발생했습니다.');\n          return;\n        }\n      });\n      /*\n      //검색 결과 목록을 출력하는 함수\n      function displayPlaces(places) {\n          let listEl = document.getElementById('placeList'),\n          menuEl = document.getElementById('dialog'),\n          fragment = document.createDocumentFragment(),\n          //bounds = new window.daum.maps.LatLngBounds(),\n          listStr = '';\n           //검색 결과 목록에 추가된 항목들을 제거\n          //removeAllChildNodes(listEl);\n           for(let i=0;i<places.length;i++){\n              //검색 결과 항목 Element를 생성\n              let itemEl = getListItem(i, places[i]);\n              fragment.appendChild(itemEl);\n          } \n           //검색 결과 항목들을 검색 결과 목록 Element에 추가\n          listEl.appendChild(fragment);\n          menuEl.scrollTop = 0;\n      }\n       //검색 결과 항목을 Element로 반환하는 함수\n      function getListItem(index, places){\n          let el = document.createElement('li'),\n          itemStr = '<span class=\"markerbg marker_' + (index+1) + '\"></span>' +\n              '<div class=\"info\">' +\n              '   <h5>' + places.place_name + '</h5>';\n           if(places.road_address_name) {\n              itemStr += '    <span>' + places.road_address_name + '</span>' +\n                  '   <span class=\"jibun gray\">' +  places.address_name  + '</span>';\n          } else{\n              itemStr += '    <span>' +  places.address_name  + '</span>'; \n          }\n           itemStr += '  <span class=\"tel\">' + places.phone  + '</span>' +\n              '</div>';\n           el.innerHTML = itemStr;\n          el.className = 'item';\n           return el;\n      }\n       //검색 결과 목록 하단에 페이지 번호를 표시하는 함수\n      function displayPagination(pagination) {\n          let paginationEl = document.getElementById('pagination'),\n          fragment = document.createDocumentFragment(),\n          i;\n           //기존에 추가된 페이지 번호 삭제\n          while(paginationEl.hasChildNodes()) {\n              paginationEl.removeChild(paginationEl.lastChild);\n          }\n           for(i=1;i<=pagination.last;i++){\n              let el = document.createElement('a');\n              el.href = \"#\";\n              el.innerHTML = i;\n               if(i===pagination.current){\n                  el.className = 'on';\n              }else{\n                  el.onClick = (function(i){\n                      return function() {\n                          pagination.gotoPage(i);\n                      }\n                  })(i);\n              }\n              fragment.appendChild(el);\n          }\n          paginationEl.appendChild(fragment);\n      }\n       //검색 결과 목록의 자식 Element를 제거하는 함수\n      function removeAllChildNodes(el) {\n          while(el.hasChildNodes()){\n              el.removeChild(el.lastChild);\n          }\n      }\n      */\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        searchDialog: false\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      id: \"standard-search\",\n      label: \"\\uC7A5\\uC18C\\uB97C \\uAC80\\uC0C9\\uD558\\uC138\\uC694!\",\n      type: \"search\",\n      margin: \"normal\",\n      value: this.state.addr,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(Button, {\n      style: {\n        backgroundColor: \"yellow\"\n      },\n      id: \"searchBtn\",\n      onClick: this.handleBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"\\uAC80\\uC0C9\"), React.createElement(Dialog, {\n      id: \"dialog\",\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"customized-dialog-title\",\n      open: this.state.searchDialog,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      id: \"placesList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"pagination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default SearchBar;","map":{"version":3,"sources":["/Users/hnee/YaManNa/src/SearchBar.js"],"names":["React","TextField","Dialog","Button","SearchBar","Component","state","addr","searchDialog","handleChange","e","setState","target","value","handleBtnClick","input","geocoder","window","daum","maps","services","Geocoder","ps","Places","addressSearch","result","status","pagination","Status","OK","alert","place_name","road_address_name","address_name","phone","keywordSearch","ZERO_RESULT","ERROR","handleClose","render","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,MAAT,QAAuB,mBAAvB,C,CAEA;;AACA,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACpCC,KADoC,GAC5B;AACJC,MAAAA,IAAI,EAAE,EADF;AAEJC,MAAAA,YAAY,EAAE;AAFV,KAD4B;;AAAA,SAMpCC,YANoC,GAMpBC,CAAD,IAAO;AAClB,WAAKC,QAAL,CAAc;AACVJ,QAAAA,IAAI,EAAEG,CAAC,CAACE,MAAF,CAASC;AADL,OAAd;AAGH,KAVmC;;AAAA,SAYpCC,cAZoC,GAYnB,MAAM;AACnB;AACA;AACA;AAEA;AACA,UAAIC,KAAK,GAAG,KAAKT,KAAL,CAAWC,IAAvB,CANmB,CAQnB;;AACA,UAAIS,QAAQ,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiBC,QAAjB,CAA0BC,QAA9B,EAAf,CATmB,CAWnB;;AACA,UAAIC,EAAE,GAAG,IAAIL,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiBC,QAAjB,CAA0BG,MAA9B,EAAT,CAZmB,CAcnB;;AACAP,MAAAA,QAAQ,CAACQ,aAAT,CAAuBT,KAAvB,EAA8B,UAASU,MAAT,EAAiBC,MAAjB,EAAyBC,UAAzB,EAAoC;AAC9D,YAAGZ,KAAK,IAAG,IAAR,IAAgBW,MAAM,KAAKT,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiBC,QAAjB,CAA0BQ,MAA1B,CAAiCC,EAA/D,EAAkE;AAC9D;AACA;AACA;AAEAC,UAAAA,KAAK,CAACL,MAAM,CAAC,CAAD,CAAN,CAAUM,UAAV,GAAqB,IAArB,GACDN,MAAM,CAAC,CAAD,CAAN,CAAUO,iBADT,GAC2B,IAD3B,GAEDP,MAAM,CAAC,CAAD,CAAN,CAAUQ,YAFT,GAEsB,IAFtB,GAGDR,MAAM,CAAC,CAAD,CAAN,CAAUS,KAHV,CAAL,CAL8D,CAU9D;AACA;AACA;AACA;AACH,SAdD,MAcM,IAAGnB,KAAK,IAAE,IAAV,EAAe;AAAE;AACnBO,UAAAA,EAAE,CAACa,aAAH,CAAiBpB,KAAjB,EAAwB,UAASU,MAAT,EAAiBC,MAAjB,EAAyBC,UAAzB,EAAoC;AACxD,gBAAGD,MAAM,KAAKT,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiBC,QAAjB,CAA0BQ,MAA1B,CAAiCC,EAA/C,EAAkD,CAC9C;AACA;AACA;AAEA;AACA;AACA;AACA;AACH,aATD,MASM,IAAIH,MAAM,KAAKT,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiBC,QAAjB,CAA0BQ,MAA1B,CAAiCQ,WAAhD,EAA6D;AAC/DN,cAAAA,KAAK,CAAC,mBAAD,CAAL;AACA;AACH,aAHK,MAGC,IAAIJ,MAAM,KAAKT,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiBC,QAAjB,CAA0BQ,MAA1B,CAAiCS,KAAhD,EAAuD;AAC1DP,cAAAA,KAAK,CAAC,qBAAD,CAAL;AACA;AACH;AACJ,WAjBD;AAkBH,SAnBK,MAmBA,IAAIJ,MAAM,KAAKT,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiBC,QAAjB,CAA0BQ,MAA1B,CAAiCQ,WAAhD,EAA6D;AAC/DN,UAAAA,KAAK,CAAC,mBAAD,CAAL;AACA;AACH,SAHK,MAGC,IAAIJ,MAAM,KAAKT,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiBC,QAAjB,CAA0BQ,MAA1B,CAAiCS,KAAhD,EAAuD;AAC1DP,UAAAA,KAAK,CAAC,qBAAD,CAAL;AACA;AACH;AACJ,OAzCD;AA2CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmFH,KAzJmC;;AAAA,SA2JpCQ,WA3JoC,GA2JtB,MAAM;AAChB,WAAK3B,QAAL,CAAc;AAAEH,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACH,KA7JmC;AAAA;;AA+JpC+B,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AACI,MAAA,EAAE,EAAC,iBADP;AAEI,MAAA,KAAK,EAAC,oDAFV;AAGI,MAAA,IAAI,EAAC,QAHT;AAII,MAAA,MAAM,EAAC,QAJX;AAKI,MAAA,KAAK,EAAE,KAAKjC,KAAL,CAAWC,IALtB;AAMI,MAAA,QAAQ,EAAE,KAAKE,YANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAUI,oBAAC,MAAD;AACI,MAAA,KAAK,EAAE;AAAC+B,QAAAA,eAAe,EAAE;AAAlB,OADX;AAEI,MAAA,EAAE,EAAC,WAFP;AAGI,MAAA,OAAO,EAAE,KAAK1B,cAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAVJ,EAgBI,oBAAC,MAAD;AACI,MAAA,EAAE,EAAE,QADR;AAEI,MAAA,OAAO,EAAE,KAAKwB,WAFlB;AAGI,yBAAgB,yBAHpB;AAII,MAAA,IAAI,EAAE,KAAKhC,KAAL,CAAWE,YAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMI;AAAI,MAAA,EAAE,EAAC,YAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,EAOI;AAAK,MAAA,EAAE,EAAC,YAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,CAhBJ,CADJ;AA4BH;;AA5LmC;;AA+LxC,eAAeJ,SAAf","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Button } from '@material-ui/core';\n\n// TODO 해인아 요기 수정하면대\nclass SearchBar extends React.Component {\n    state = {\n        addr: '',\n        searchDialog: false,\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            addr: e.target.value\n        });\n    }\n\n    handleBtnClick = () => {\n        //this.setState({ searchDialog: true });\n        //this.forceUpdate();\n        //alert(this.state.addr);\n\n        //검색 input\n        let input = this.state.addr;\n\n        //주소-좌표 변환 객체를 생성\n        let geocoder = new window.daum.maps.services.Geocoder();\n\n        //키워드 검색 객체를 생성\n        let ps = new window.daum.maps.services.Places();\n\n        //주소로 검색한 경우\n        geocoder.addressSearch(input, function(result, status, pagination){\n            if(input!= null && status === window.daum.maps.services.Status.OK){\n                //let coords = new window.daum.maps.LatLng(result[0].y, result[0].x);\n                //alert(\"Lat: \"+result[0].y+\", \\n\"+\n                //        \"Lng: \"+result[0].x);\n\n                alert(result[0].place_name+\"\\n\"\n                    +result[0].road_address_name+\"\\n\"\n                    +result[0].address_name+\"\\n\"\n                    +result[0].phone);\n\n                //검색 목록 출력\n                //displayPlaces(result);\n                //페이지 번호 출력\n                //displayPagination(pagination);\n            }else if(input!=null){ //키워드(장소명)로 검색한 경우\n                ps.keywordSearch(input, function(result, status, pagination){\n                    if(status === window.daum.maps.services.Status.OK){\n                        //let coords = new window.daum.maps.LatLng(result[0].y, result[0].x);\n                        //alert(\"Lat: \"+result[0].y+\", \\n\"+\n                        //        \"Lng: \"+result[0].x);\n\n                        //검색 목록 출력\n                        //displayPlaces(result);\n                        //페이지 번호 출력\n                        //displayPagination(pagination);\n                    }else if (status === window.daum.maps.services.Status.ZERO_RESULT) {\n                        alert('검색 결과가 존재하지 않습니다.');\n                        return;       \n                    } else if (status === window.daum.maps.services.Status.ERROR) {        \n                        alert('검색 결과 중 오류가 발생했습니다.');\n                        return;\n                    }\n                })\n            }else if (status === window.daum.maps.services.Status.ZERO_RESULT) {\n                alert('검색 결과가 존재하지 않습니다.');\n                return;       \n            } else if (status === window.daum.maps.services.Status.ERROR) {        \n                alert('검색 결과 중 오류가 발생했습니다.');\n                return;\n            }\n        });\n        \n        /*\n        //검색 결과 목록을 출력하는 함수\n        function displayPlaces(places) {\n            let listEl = document.getElementById('placeList'),\n            menuEl = document.getElementById('dialog'),\n            fragment = document.createDocumentFragment(),\n            //bounds = new window.daum.maps.LatLngBounds(),\n            listStr = '';\n\n            //검색 결과 목록에 추가된 항목들을 제거\n            //removeAllChildNodes(listEl);\n\n            for(let i=0;i<places.length;i++){\n                //검색 결과 항목 Element를 생성\n                let itemEl = getListItem(i, places[i]);\n                fragment.appendChild(itemEl);\n            } \n\n            //검색 결과 항목들을 검색 결과 목록 Element에 추가\n            listEl.appendChild(fragment);\n            menuEl.scrollTop = 0;\n        }\n\n        //검색 결과 항목을 Element로 반환하는 함수\n        function getListItem(index, places){\n            let el = document.createElement('li'),\n            itemStr = '<span class=\"markerbg marker_' + (index+1) + '\"></span>' +\n                '<div class=\"info\">' +\n                '   <h5>' + places.place_name + '</h5>';\n\n            if(places.road_address_name) {\n                itemStr += '    <span>' + places.road_address_name + '</span>' +\n                    '   <span class=\"jibun gray\">' +  places.address_name  + '</span>';\n            } else{\n                itemStr += '    <span>' +  places.address_name  + '</span>'; \n            }\n\n            itemStr += '  <span class=\"tel\">' + places.phone  + '</span>' +\n                '</div>';\n\n            el.innerHTML = itemStr;\n            el.className = 'item';\n\n            return el;\n        }\n\n        //검색 결과 목록 하단에 페이지 번호를 표시하는 함수\n        function displayPagination(pagination) {\n            let paginationEl = document.getElementById('pagination'),\n            fragment = document.createDocumentFragment(),\n            i;\n\n            //기존에 추가된 페이지 번호 삭제\n            while(paginationEl.hasChildNodes()) {\n                paginationEl.removeChild(paginationEl.lastChild);\n            }\n\n            for(i=1;i<=pagination.last;i++){\n                let el = document.createElement('a');\n                el.href = \"#\";\n                el.innerHTML = i;\n\n                if(i===pagination.current){\n                    el.className = 'on';\n                }else{\n                    el.onClick = (function(i){\n                        return function() {\n                            pagination.gotoPage(i);\n                        }\n                    })(i);\n                }\n                fragment.appendChild(el);\n            }\n            paginationEl.appendChild(fragment);\n        }\n\n        //검색 결과 목록의 자식 Element를 제거하는 함수\n        function removeAllChildNodes(el) {\n            while(el.hasChildNodes()){\n                el.removeChild(el.lastChild);\n            }\n        }\n        */\n    }\n\n    handleClose = () => {\n        this.setState({ searchDialog: false });\n    };\n\n    render() {\n        return (\n            <div>\n                <TextField\n                    id=\"standard-search\"\n                    label=\"장소를 검색하세요!\"\n                    type=\"search\"\n                    margin=\"normal\"\n                    value={this.state.addr}\n                    onChange={this.handleChange}\n                />\n\n                <Button\n                    style={{backgroundColor: \"yellow\"}}\n                    id=\"searchBtn\"\n                    onClick={this.handleBtnClick}\n                >검색</Button>\n\n                <Dialog\n                    id= \"dialog\"\n                    onClose={this.handleClose}\n                    aria-labelledby=\"customized-dialog-title\"\n                    open={this.state.searchDialog}\n                >\n                    <ul id=\"placesList\"></ul>\n                    <div id=\"pagination\"></div>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}