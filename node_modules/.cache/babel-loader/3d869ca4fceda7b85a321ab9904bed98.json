{"ast":null,"code":"var _jsxFileName = \"/Users/hnee/YaManNa/src/SearchBar.js\";\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Button, AppBar, Toolbar, List, ListItem, ListItemText } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close'; // TODO 해인아 요기 수정하면대\n\nclass SearchBar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      addr: '',\n      searchDialog: false,\n      result: [{\n        place_name: ''\n      }]\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        addr: e.target.value\n      });\n    };\n\n    this.handleBtnClick = () => {\n      this.setState({\n        searchDialog: true\n      }); //this.forceUpdate();\n      //alert(this.state.addr);\n      //검색 input\n\n      let input = this.state.addr; //주소-좌표 변환 객체를 생성\n\n      let geocoder = new window.daum.maps.services.Geocoder(); //키워드 검색 객체를 생성\n\n      let ps = new window.daum.maps.services.Places();\n      let searchResult = []; //주소로 검색한 경우\n\n      geocoder.addressSearch(input, function (result, status, pagination) {\n        if (input != null && status === window.daum.maps.services.Status.OK) {\n          //let coords = new window.daum.maps.LatLng(result[0].y, result[0].x);\n          //alert(\"Lat: \"+result[0].y+\", \\n\"+\n          //        \"Lng: \"+result[0].x);\n          //alert(result[0].place_name+\"\\n\" //장소명\n          //    +result[0].road_address_name+\"\\n\"   //도로명주소\n          //    +result[0].address_name+\"\\n\"    //지번주소\n          //    +result[0].phone);  //전화번호 //있으면 출력 없으면 안 출력\n          searchResult = result; //검색 목록 출력\n          //displayPlaces(result);\n          //페이지 번호 출력\n          //displayPagination(pagination);\n        } else if (input != null) {\n          //키워드(장소명)로 검색한 경우\n          ps.keywordSearch(input, function (result, status, pagination) {\n            if (status === window.daum.maps.services.Status.OK) {\n              //let coords = new window.daum.maps.LatLng(result[0].y, result[0].x);\n              //alert(\"Lat: \"+result[0].y+\", \\n\"+\n              //        \"Lng: \"+result[0].x);\n              searchResult = result; //검색 목록 출력\n              //displayPlaces(result);\n              //페이지 번호 출력\n              //displayPagination(pagination);\n            } else if (status === window.daum.maps.services.Status.ZERO_RESULT) {\n              alert('검색 결과가 존재하지 않습니다.');\n              return;\n            } else if (status === window.daum.maps.services.Status.ERROR) {\n              alert('검색 결과 중 오류가 발생했습니다.');\n              return;\n            }\n          });\n        } else if (status === window.daum.maps.services.Status.ZERO_RESULT) {\n          alert('검색 결과가 존재하지 않습니다.');\n          return;\n        } else if (status === window.daum.maps.services.Status.ERROR) {\n          alert('검색 결과 중 오류가 발생했습니다.');\n          return;\n        }\n      });\n      /*\n      //검색 결과 목록을 출력하는 함수\n      function displayPlaces(places) {\n          let listEl = document.getElementById('placeList'),\n          menuEl = document.getElementById('dialog'),\n          fragment = document.createDocumentFragment(),\n          //bounds = new window.daum.maps.LatLngBounds(),\n          listStr = '';\n           //검색 결과 목록에 추가된 항목들을 제거\n          //removeAllChildNodes(listEl);\n           for(let i=0;i<places.length;i++){\n              //검색 결과 항목 Element를 생성\n              let itemEl = getListItem(i, places[i]);\n              fragment.appendChild(itemEl);\n          } \n           //검색 결과 항목들을 검색 결과 목록 Element에 추가\n          listEl.appendChild(fragment);\n          menuEl.scrollTop = 0;\n      }\n       //검색 결과 항목을 Element로 반환하는 함수\n      function getListItem(index, places){\n          let el = document.createElement('li'),\n          itemStr = '<span class=\"markerbg marker_' + (index+1) + '\"></span>' +\n              '<div class=\"info\">' +\n              '   <h5>' + places.place_name + '</h5>';\n           if(places.road_address_name) {\n              itemStr += '    <span>' + places.road_address_name + '</span>' +\n                  '   <span class=\"jibun gray\">' +  places.address_name  + '</span>';\n          } else{\n              itemStr += '    <span>' +  places.address_name  + '</span>'; \n          }\n           itemStr += '  <span class=\"tel\">' + places.phone  + '</span>' +\n              '</div>';\n           el.innerHTML = itemStr;\n          el.className = 'item';\n           return el;\n      }\n       //검색 결과 목록 하단에 페이지 번호를 표시하는 함수\n      function displayPagination(pagination) {\n          let paginationEl = document.getElementById('pagination'),\n          fragment = document.createDocumentFragment(),\n          i;\n           //기존에 추가된 페이지 번호 삭제\n          while(paginationEl.hasChildNodes()) {\n              paginationEl.removeChild(paginationEl.lastChild);\n          }\n           for(i=1;i<=pagination.last;i++){\n              let el = document.createElement('a');\n              el.href = \"#\";\n              el.innerHTML = i;\n               if(i===pagination.current){\n                  el.className = 'on';\n              }else{\n                  el.onClick = (function(i){\n                      return function() {\n                          pagination.gotoPage(i);\n                      }\n                  })(i);\n              }\n              fragment.appendChild(el);\n          }\n          paginationEl.appendChild(fragment);\n      }\n       //검색 결과 목록의 자식 Element를 제거하는 함수\n      function removeAllChildNodes(el) {\n          while(el.hasChildNodes()){\n              el.removeChild(el.lastChild);\n          }\n      }\n      */\n\n      this.setState({\n        result: searchResult\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        searchDialog: false\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      id: \"standard-search\",\n      label: \"\\uC7A5\\uC18C\\uB97C \\uAC80\\uC0C9\\uD558\\uC138\\uC694!\",\n      type: \"search\",\n      margin: \"normal\",\n      value: this.state.addr,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(Button, {\n      style: {\n        backgroundColor: \"yellow\"\n      },\n      id: \"searchBtn\",\n      onClick: this.handleBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"\\uAC80\\uC0C9\"), React.createElement(Dialog, {\n      id: \"dialog\",\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"customized-dialog-title\",\n      open: this.state.searchDialog,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(AppBar, {\n      position: \"relative\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h6\",\n      marginLeft: \"theme.spacing(2)\",\n      flex: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"\\uC7A5\\uC18C \\uAC80\\uC0C9\"), React.createElement(IconButton, {\n      edge: \"end\",\n      color: \"inherit\",\n      onClick: this.handleClose,\n      \"aria-label\": \"Close\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    })))), React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(ListItem, {\n      button: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: this.state.result[0].place_name,\n      secondary: \"haein\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default SearchBar;","map":{"version":3,"sources":["/Users/hnee/YaManNa/src/SearchBar.js"],"names":["React","TextField","Dialog","Button","AppBar","Toolbar","List","ListItem","ListItemText","IconButton","Typography","CloseIcon","SearchBar","Component","state","addr","searchDialog","result","place_name","handleChange","e","setState","target","value","handleBtnClick","input","geocoder","window","daum","maps","services","Geocoder","ps","Places","searchResult","addressSearch","status","pagination","Status","OK","keywordSearch","ZERO_RESULT","alert","ERROR","handleClose","render","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Button, AppBar, Toolbar, List, ListItem, ListItemText } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\n\n// TODO 해인아 요기 수정하면대\nclass SearchBar extends React.Component {\n\n    state = {\n        addr: '',\n        searchDialog: false,\n        result:[{place_name:''}]\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            addr: e.target.value\n        });\n    }\n\n    handleBtnClick = () => {\n        this.setState({ searchDialog: true });\n        //this.forceUpdate();\n        //alert(this.state.addr);\n\n        //검색 input\n        let input = this.state.addr;\n\n        //주소-좌표 변환 객체를 생성\n        let geocoder = new window.daum.maps.services.Geocoder();\n\n        //키워드 검색 객체를 생성\n        let ps = new window.daum.maps.services.Places();\n\n        let searchResult = [];\n\n        //주소로 검색한 경우\n        geocoder.addressSearch(input, function(result, status, pagination){\n            if(input!= null && status === window.daum.maps.services.Status.OK){\n                //let coords = new window.daum.maps.LatLng(result[0].y, result[0].x);\n                //alert(\"Lat: \"+result[0].y+\", \\n\"+\n                //        \"Lng: \"+result[0].x);\n\n                //alert(result[0].place_name+\"\\n\" //장소명\n                //    +result[0].road_address_name+\"\\n\"   //도로명주소\n                //    +result[0].address_name+\"\\n\"    //지번주소\n                //    +result[0].phone);  //전화번호 //있으면 출력 없으면 안 출력\n\n                searchResult = result;\n\n                //검색 목록 출력\n                //displayPlaces(result);\n                //페이지 번호 출력\n                //displayPagination(pagination);\n            }else if(input!=null){ //키워드(장소명)로 검색한 경우\n                ps.keywordSearch(input, function(result, status, pagination){\n                    if(status === window.daum.maps.services.Status.OK){\n                        //let coords = new window.daum.maps.LatLng(result[0].y, result[0].x);\n                        //alert(\"Lat: \"+result[0].y+\", \\n\"+\n                        //        \"Lng: \"+result[0].x);\n\n                        searchResult = result;\n\n                        //검색 목록 출력\n                        //displayPlaces(result);\n                        //페이지 번호 출력\n                        //displayPagination(pagination);\n                    }else if (status === window.daum.maps.services.Status.ZERO_RESULT) {\n                        alert('검색 결과가 존재하지 않습니다.');\n                        return;       \n                    } else if (status === window.daum.maps.services.Status.ERROR) {        \n                        alert('검색 결과 중 오류가 발생했습니다.');\n                        return;\n                    }\n                })\n            }else if (status === window.daum.maps.services.Status.ZERO_RESULT) {\n                alert('검색 결과가 존재하지 않습니다.');\n                return;       \n            } else if (status === window.daum.maps.services.Status.ERROR) {        \n                alert('검색 결과 중 오류가 발생했습니다.');\n                return;\n            }\n        });\n        \n        /*\n        //검색 결과 목록을 출력하는 함수\n        function displayPlaces(places) {\n            let listEl = document.getElementById('placeList'),\n            menuEl = document.getElementById('dialog'),\n            fragment = document.createDocumentFragment(),\n            //bounds = new window.daum.maps.LatLngBounds(),\n            listStr = '';\n\n            //검색 결과 목록에 추가된 항목들을 제거\n            //removeAllChildNodes(listEl);\n\n            for(let i=0;i<places.length;i++){\n                //검색 결과 항목 Element를 생성\n                let itemEl = getListItem(i, places[i]);\n                fragment.appendChild(itemEl);\n            } \n\n            //검색 결과 항목들을 검색 결과 목록 Element에 추가\n            listEl.appendChild(fragment);\n            menuEl.scrollTop = 0;\n        }\n\n        //검색 결과 항목을 Element로 반환하는 함수\n        function getListItem(index, places){\n            let el = document.createElement('li'),\n            itemStr = '<span class=\"markerbg marker_' + (index+1) + '\"></span>' +\n                '<div class=\"info\">' +\n                '   <h5>' + places.place_name + '</h5>';\n\n            if(places.road_address_name) {\n                itemStr += '    <span>' + places.road_address_name + '</span>' +\n                    '   <span class=\"jibun gray\">' +  places.address_name  + '</span>';\n            } else{\n                itemStr += '    <span>' +  places.address_name  + '</span>'; \n            }\n\n            itemStr += '  <span class=\"tel\">' + places.phone  + '</span>' +\n                '</div>';\n\n            el.innerHTML = itemStr;\n            el.className = 'item';\n\n            return el;\n        }\n\n        //검색 결과 목록 하단에 페이지 번호를 표시하는 함수\n        function displayPagination(pagination) {\n            let paginationEl = document.getElementById('pagination'),\n            fragment = document.createDocumentFragment(),\n            i;\n\n            //기존에 추가된 페이지 번호 삭제\n            while(paginationEl.hasChildNodes()) {\n                paginationEl.removeChild(paginationEl.lastChild);\n            }\n\n            for(i=1;i<=pagination.last;i++){\n                let el = document.createElement('a');\n                el.href = \"#\";\n                el.innerHTML = i;\n\n                if(i===pagination.current){\n                    el.className = 'on';\n                }else{\n                    el.onClick = (function(i){\n                        return function() {\n                            pagination.gotoPage(i);\n                        }\n                    })(i);\n                }\n                fragment.appendChild(el);\n            }\n            paginationEl.appendChild(fragment);\n        }\n\n        //검색 결과 목록의 자식 Element를 제거하는 함수\n        function removeAllChildNodes(el) {\n            while(el.hasChildNodes()){\n                el.removeChild(el.lastChild);\n            }\n        }\n        */\n\n        this.setState({result: searchResult});\n    }\n\n    handleClose = () => {\n        this.setState({ searchDialog: false });\n    };\n\n    render() {\n        return (\n            <div>\n                <TextField\n                    id=\"standard-search\"\n                    label=\"장소를 검색하세요!\"\n                    type=\"search\"\n                    margin=\"normal\"\n                    value={this.state.addr}\n                    onChange={this.handleChange}\n                />\n\n                <Button\n                    style={{backgroundColor: \"yellow\"}}\n                    id=\"searchBtn\"\n                    onClick={this.handleBtnClick}\n                >검색</Button>\n\n                <Dialog\n                    id= \"dialog\"\n                    onClose={this.handleClose}\n                    aria-labelledby=\"customized-dialog-title\"\n                    open={this.state.searchDialog}>\n                        <AppBar position=\"relative\">\n                            <Toolbar>\n                            <Typography variant=\"h6\" marginLeft=\"theme.spacing(2)\" flex={1}>\n                                장소 검색\n                            </Typography>\n                            <IconButton edge=\"end\" color=\"inherit\" onClick={this.handleClose} aria-label=\"Close\">\n                                <CloseIcon />\n                            </IconButton>\n                            </Toolbar>\n                            </AppBar>\n                            <List>\n                                <ListItem button>\n                                    <ListItemText primary={this.state.result[0].place_name} secondary=\"haein\" />\n                                </ListItem>\n                            </List>\n                        \n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}